name: Org Project add & sync (GitHub App)

on:
  issues:
    types: [opened]

permissions:
  contents: read

concurrency:
  group: org-project-sync-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: true

env:
  PROJECT_URL: "https://github.com/orgs/Adapt4Now/projects/1"

jobs:
  add-and-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Precheck APP_ID / APP_PEM
        run: |
          test -n "${{ vars.APP_ID }}" || (echo "::error::Missing repo variable APP_ID"; exit 1)
          test -n "${{ secrets.APP_PEM }}" || (echo "::error::Missing repo secret APP_PEM"; exit 1)
          echo "OK: APP_ID/APP_PEM are present"

      - name: Create installation token (GitHub App)
        id: app
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}

      - name: Add to project & set fields
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app.outputs.token }}
          script: |
            const projectUrl = process.env.PROJECT_URL.trim();
            const m = projectUrl.match(/orgs\/([^/]+)\/projects\/(\d+)/);
            if (!m) core.setFailed(`PROJECT_URL must be https://github.com/orgs/<ORG>/projects/<N>. Got: ${projectUrl}`);
            const orgLogin = m[1];
            const projectNumber = parseInt(m[2], 10);

            const ev = context.payload;
            const nodeId = ev.issue.node_id;
            const labels = ev.issue.labels || [];
            const labelNames = labels.map(l => l.name);

            const q = `query($login:String!, $number:Int!){
              organization(login:$login){
                projectV2(number:$number){
                  id title url
                  fields(first:50){
                    nodes{
                      ... on ProjectV2FieldCommon{ id name dataType }
                      ... on ProjectV2SingleSelectField{ id name dataType options{ id name } }
                    }
                  }
                }
              }
            }`;
            const r = await github.graphql(q, { login: orgLogin, number: projectNumber });
            const project = r.organization?.projectV2;
            if (!project) core.setFailed(`Org Project not found by URL ${projectUrl}`);

            const fields = project.fields.nodes || [];
            const f = n => fields.find(x => x.name === n);
            const statusField = f('Status');
            const kindField   = f('Kind');
            const prioField   = f('Priority');
            if (!statusField) core.setFailed('Field "Status" is missing in Project');

            const addRes = await github.graphql(
              `mutation($projectId:ID!,$contentId:ID!){
                 addProjectV2ItemById(input:{projectId:$projectId, contentId:$contentId}) {
                   item { id }
                 }
               }`,
              { projectId: project.id, contentId: nodeId }
            );
            const projectItemId = addRes.addProjectV2ItemById.item.id;

            const kindMap = { 'type:feature':'feature','type:bug':'bug','type:chore':'chore','type:docs':'docs','type:refactor':'refactor' };
            const kindValue = Object.keys(kindMap).find(k => labelNames.includes(k)) ? kindMap[Object.keys(kindMap).find(k => labelNames.includes(k))] : null;
            const prioValue = ['P0','P1','P2'].find(p => labelNames.includes(p)) || null;

            async function setSelect(field, desired){
              if (!field || !desired) return;
              const opts = field.options || [];
              let opt = opts.find(o => o.name === desired);
              if (!opt && field.name === 'Status') {
                if (/inbox/i.test(desired)) opt = opts.find(o => /to *do|backlog|todo/i.test(o.name));
                if (/done/i.test(desired))  opt = opts.find(o => /done/i.test(o.name));
              }
              if (!opt) { core.warning(\`Option "\${desired}" not found in "\${field.name}"\`); return; }
              await github.graphql(
                `mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId:String!){
                  updateProjectV2ItemFieldValue(
                    input:{ projectId:$projectId, itemId:$itemId, fieldId:$fieldId, value:{ singleSelectOptionId:$optionId } }
                  ){ projectV2Item { id } }
                }`,
                { projectId: project.id, itemId: projectItemId, fieldId: field.id, optionId: opt.id }
              );
            }

            await Promise.all([
              setSelect(statusField, 'Inbox'),
              setSelect(kindField,   kindValue),
              setSelect(prioField,   prioValue),
            ]);

            core.notice(\`Done. Status=Inbox Kind=\${kindValue||'-'} Priority=\${prioValue||'-'}\`);
